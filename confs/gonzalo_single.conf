general {
    base_exp_dir = ./logs/132/
    recording = [
    ]
}

dataset {
    data_dirs = [
        // "./datasets/Gonzalo/018/2021-05-20-17-54-26/portrait_reconstruction/",
        // "./datasets/Gonzalo/019/2021-05-20-18-06-11/portrait_reconstruction/",
        // "./datasets/Gonzalo/020/2021-05-27-16-17-29/portrait_reconstruction/",
        // "./datasets/Gonzalo/021/2021-05-27-16-24-42/portrait_reconstruction/",
        // "./datasets/Gonzalo/027/2021-05-27-17-18-14/portrait_reconstruction/",
        // "./datasets/Gonzalo/060/2021-06-10-16-49-58/portrait_reconstruction/",
        // "./datasets/Gonzalo/069/2021-06-24-16-25-17/portrait_reconstruction/",
        // "./datasets/Gonzalo/107/2021-07-08-15-34-39/portrait_reconstruction/",
        // "./datasets/Gonzalo/115/2021-07-08-17-02-02/portrait_reconstruction/",
        // "./datasets/Gonzalo/119/2021-07-08-17-29-06/portrait_reconstruction/",
        "./datasets/Gonzalo/132/2021-07-22-12-28-42/portrait_reconstruction/",
    ]
    images_to_pick_val = [[0, ["00747", "00889"]]]

    render_cameras_name = cameras_sphere.npz
    object_cameras_name = cameras_sphere.npz
    batch_size = ${train.batch_size}
}

train {
    learning_rate = 5e-4
    learning_rate_alpha = 1.0
    learning_rate_reduce_steps = [125000, 210000]
    learning_rate_reduce_factor = 0.2
    end_iter = 250000

    batch_size = 512
    validate_resolution_level = 2
    warm_up_end = 500
    anneal_end = 0 // 50000
    use_white_bkgd = False

    save_freq = 7500
    val_freq = 5000
    val_images_idxs = [0, 9]
    val_mesh_freq = 5000
    report_freq = 100

    igr_weight = 0.1
    mask_weight = 0.0 // 0.1
}

model {
    nerf {
        D = 8,
        d_in = 4,
        d_in_view = 3,
        W = 256,
        multires = 10,
        multires_view = 4,
        output_ch = 4,
        skips=[4],
        use_viewdirs=True
    }

    sdf_network {
        d_out = 257
        d_in = 3
        d_hidden = 256
        n_layers = 8
        skip_in = [4]
        multires = 6
        bias = 0.5
        scale = 1.0
        geometric_init = True
        weight_norm = True
    }

    variance_network {
        init_val = 0.3
    }

    rendering_network {
        d_feature = 256
        mode = idr
        d_in = 9
        d_out = 3
        d_hidden = 256
        n_layers = 4
        weight_norm = True
        multires_view = 4
        squeeze_out = True
    }

    neus_renderer {
        n_samples = 64
        n_importance = 64
        n_outside = 32 // 0
        up_sample_steps = 4     // 1 for simple coarse-to-fine sampling
        perturb = 1.0
    }
}
